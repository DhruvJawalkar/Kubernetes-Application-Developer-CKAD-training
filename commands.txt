minikube start
minikube stop
minikube delete --all

kubectl get pods
kubectl get pods -o wide

kubectl run --help
kubectl run nginx --image=nginx
kubectl run redis --image=redis123 --dry-run=client -o yaml
kubectl run redis --image=redis123 --dry-run=client -o yaml > redis.yaml
//cat redis.yaml
kubectl create -f redis.yaml
//can change config and apply changes as below
kubectl apply -f redis.yaml

kubectl describe pod nginx

kubectl delete pod nginx

//to extract pod definition to a file
kubectl get pod <pod-name> -o yaml > pod-definition.yaml

//To modify the properties of the pod
kubectl edit pod <pod-name>

kubectl create -f rc-definition.yml
kubectl get replicationcontroller
kubectl delete replicationcontroller myapp-rc

kubectl create -f replicaset-definition.yml
kubectl get replicaset

kubectl replace -f replicaset-definition.yml
kubectl scale --replicas=6 -f replicaset-definition.yml
kubectl scale --replicas=6 replicaset myapp-replicaset
kubectl edit replicaset myapp-replicaset

kubectl explain replicaset
kubectl delete pod podname_1 podname_2 ...

kubectl create -f deployment-definition.yml
kubectl get deployments
kubectl get replicaset
kubectl get pods
kubectl explain deployment
kubectl create deployment --help
kubectl create deployment --image=nginx nginx --dry-run -o yaml
kubectl create deployment nginx --image=nginx --replicas=4
kubectl scale deployment nginx --replicas=4
kubectl create deployment httpd-frontend --image=httpd:2.4-alpine --replicas=3

kubectl get all

kubectl create namespace test-123 --dry-run -o yaml

kubectl get namespaces
kubectl config set-context $(kubectl config current-context) --namespace=dev
kubectl get pods --namespace=research
kubectl get pods -n=research
kubectl run redis --image=redis -n=finance
kubectl get pods --all-namespaces
kubectl get pods -A

kubectl create -f compute-quota.yml

kubectl run nginx --image=nginx --dry-run=client -o yaml > nginx-pod.yaml

#Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml

#Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

#Imperative commands
kubectl run nginx-pod --image=nginx:alpine --dry-run=client
kubectl run nginx-pod --image=nginx:alpine --dry-run=client -o yaml > redis-pod.yaml
kubectl create -f redis-pod.yaml --dry-run=client

kubectl run custom-nginx --image=nginx --port=8080 --dry-run=client -o yaml
kubectl run --help
kubectl run httpd --image=httpd:alpine --port=80 --expose=true
kubectl describe svc httpd

----------------------------------------------------------------------------------------------------------------------------
Docker commands:
docker image ls
docker build -t webapp-color .
docker run -dp 127.0.0.1:8282:8080 webapp-color
docker ps -a
docker image inspect python:3.6

docker run -e APP_COLOR=pink simple-webapp-color
----------------------------------------------------------------------------------------------------------------------------

cat ubuntu-sleeper-2.yaml
kubectl run --help
kubectl run webapp-green --image=kodecloud/webapp-color -- --color green
kubectl run webapp-green --image=kodecloud/webapp-color --command -- python app.py --color green

kubectl create configmap app-config --from-literal=APP_COLOR=blue --from-literal=APP_MOD=prod
kubectl create configmap app-config --from-file=app_config.properties
kubectl create -f config-map.yaml
kubectl get configmaps
kubectl get cm
kubectl describe configmaps
kubectl describe configmap db-config

kubectl create secret generic <secret-name> --from-literal=<key>=<value>
kubectl create secret generic app-secret --from-literal=DB_HOST=mysql --from-literal=DB_User=root --from-literal=DB_Password=paswrd
kubectl create secret generic <secret-name> --from-file=<path-to-file>
kubectl create secret generic app-secret --from-file=app_secret.properties
kubectl create -f secret-data.yaml
echo -n 'mysql' | base64
echo -n 'bXlzcWw=' | base64 --decode
kubectl get secrets
kubectl describe secrets
kubectl get secret app-secret -o yaml
